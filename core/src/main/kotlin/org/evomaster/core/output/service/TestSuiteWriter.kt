package org.evomaster.core.output.service

import com.google.inject.Inject
import org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto
import org.evomaster.core.EMConfig
import org.evomaster.core.output.*
import org.evomaster.core.search.Solution
import org.evomaster.core.search.service.SearchTimeController
import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime

/**
 * Given a Solution as input, convert it to a string representation of
 * the tests that can be written to file and be compiled
 */
class TestSuiteWriter {

    @Inject
    private lateinit var config: EMConfig

    @Inject
    private lateinit var searchTimeController: SearchTimeController

    companion object {
        private const val controller = "controller"
        private const val baseUrlOfSut = "baseUrlOfSut"
    }

    fun writeTests(
            solution: Solution<*>,
            controllerName: String
    ) {

        val name = TestSuiteFileName(config.testSuiteFileName)

        val content = convertToCompilableTestCode(solution, name, controllerName)
        saveToDisk(content, config, name)
    }


    private fun convertToCompilableTestCode(
            solution: Solution<*>,
            testSuiteFileName: TestSuiteFileName,
            controllerName: String
            )
            : String {

        val lines = Lines()

        header(solution, testSuiteFileName, lines)
        lines.indent()

        beforeAfterMethods(controllerName, lines)

        val tests = TestSuiteOrganizer.sortTests(solution)

        for (test in tests) {
            lines.addEmpty(2)

            val testLines = TestCaseWriter()
                    .convertToCompilableTestCode(config.outputFormat, test, baseUrlOfSut)
            lines.add(testLines)
        }

        lines.deindent()
        footer(lines)

        return lines.toString()
    }


    private fun saveToDisk(testFileContent: String,
                           config: EMConfig,
                           testSuiteFileName: TestSuiteFileName) {

        val path = Paths.get(config.outputFolder, testSuiteFileName.getAsPath(config.outputFormat))

        Files.createDirectories(path.parent)
        Files.deleteIfExists(path)
        Files.createFile(path)

        path.toFile().appendText(testFileContent)
    }

    private fun classDescriptionComment(solution: Solution<*>, lines: Lines) {
        lines.add("/**")
        lines.add(" * This file was automatically generated by EvoMaster on ${ZonedDateTime.now()}")
        lines.add(" * <br>")
        lines.add(" * The generated test suite contains ${solution.individuals.size} tests")
        lines.add(" * <br>")
        lines.add(" * Covered targets: ${solution.overall.coveredTargets()}")
        lines.add(" * <br>")
        lines.add(" * Used time: ${searchTimeController.getElapsedTime()}")
        lines.add(" * <br>")
        lines.add(" * Needed budget for current results: ${searchTimeController.neededBudget()}")
        lines.add(" */")
    }

    private fun header(solution: Solution<*>,
                       name: TestSuiteFileName,
                       lines: Lines) {

        val format = config.outputFormat

        if (name.hasPackage() && format.isJavaOrKotlin()) {
            lines.add("package ${name.getPackage()}")
            appendSemicolon(lines)
        }

        lines.addEmpty(2)

        if (format.isJUnit5()) {
            addImport("org.junit.jupiter.api.AfterAll", lines)
            addImport("org.junit.jupiter.api.BeforeAll", lines)
            addImport("org.junit.jupiter.api.BeforeEach", lines)
            addImport("org.junit.jupiter.api.Test", lines)
            addImport("static org.junit.jupiter.api.Assertions.*", lines)
        }
        if (format.isJUnit4()) {
            addImport("org.junit.AfterClass", lines)
            addImport("org.junit.BeforeClass", lines)
            addImport("org.junit.Before", lines)
            addImport("org.junit.Test", lines)
            addImport("static org.junit.Assert.*", lines)
        }

        //TODO check if those are used
        addImport("io.restassured.RestAssured", lines)
        addImport("static io.restassured.RestAssured.given", lines)
        addImport("static org.evomaster.client.java.controller.api.EMTestUtils.*", lines)
        addImport("org.evomaster.client.java.controller.SutHandler", lines)
        addImport("static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql", lines)
        addImport(InsertionDto::class.qualifiedName!!, lines)
        addImport("java.util.List", lines)
        //addImport("static org.hamcrest.core.Is.is", lines, format)

        lines.addEmpty(2)

        classDescriptionComment(solution, lines)

        if (format.isJavaOrKotlin()) {
            defineClass(name, lines)
            lines.addEmpty()
        }
    }


    private fun beforeAfterMethods(controllerName: String, lines: Lines) {

        //TODO check format

        lines.addEmpty()
        lines.add("private static SutHandler $controller = new $controllerName();")
        lines.add("private static String $baseUrlOfSut;")
        lines.addEmpty(2)

        val format = config.outputFormat

        when {
            format.isJUnit4() -> lines.add("@BeforeClass")
            format.isJUnit5() -> lines.add("@BeforeAll")
        }
        lines.add("public static void initClass() {")
        lines.indent()
        lines.add("baseUrlOfSut = $controller.startSut();")
        lines.add("assertNotNull(baseUrlOfSut);")
        lines.add("RestAssured.urlEncodingEnabled = false;")
        lines.deindent()
        lines.add("}")

        lines.addEmpty(2)

        when {
            format.isJUnit4() -> lines.add("@AfterClass")
            format.isJUnit5() -> lines.add("@AfterAll")
        }
        lines.add("public static void tearDown() {")
        lines.indent()
        lines.add("$controller.stopSut();")
        lines.deindent()
        lines.add("}")

        lines.addEmpty(2)

        when {
            format.isJUnit4() -> lines.add("@Before")
            format.isJUnit5() -> lines.add("@BeforeEach")
        }
        lines.add("public void initTest() {")
        lines.indent()
        lines.add("$controller.resetStateOfSUT();")
        lines.deindent()
        lines.add("}")

        lines.addEmpty(2)
    }


    private fun footer(lines: Lines) {
        lines.addEmpty(2)
        lines.add("}")
    }

    private fun defineClass(name: TestSuiteFileName, lines: Lines) {

        lines.addEmpty()

        val format = config.outputFormat

        when {
            format.isJava() -> lines.append("public ")
            format.isKotlin() -> lines.append("internal ")
        }

        lines.append("class ${name.getClassName()} {")
    }

    private fun addImport(klass: Class<*>, lines: Lines) {
        addImport(klass.name, lines)
    }

    private fun addImport(klass: String, lines: Lines) {
        lines.add("import $klass")
        appendSemicolon(lines)
    }

    private fun appendSemicolon(lines: Lines) {
        if (config.outputFormat.isJava()) {
            lines.append(";")
        }
    }

}