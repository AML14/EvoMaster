#proxyprint
#### POST with HttpServletRequest */printdocument*
    
    - parameters of RestCallAction is null due to HttpServletRequest
    - related path: */printdocument/{id}*, */printdocument/{id}/budget*
    

**Source code:**
```
    @ApiOperation(value = "Returns a Print Request ID", notes = "This method allows other platforms to print a document using ProxyPrint")
    @RequestMapping(value = "/printdocument", method = RequestMethod.POST)
    public String printDocument(HttpServletRequest request) throws IOException {
        JsonObject response = new JsonObject();

        PrintRequest printRequest = new PrintRequest();
        printRequest = printRequests.save(printRequest);

        // Process files
        Map<String, Long> documentsIds = processSumitedFiles(printRequest, request);

        // Parse and store documents and specifications
        storeDocumentsWithDefaultSpecs(documentsIds);

        response.addProperty("success", true);
        response.addProperty("printRequestID", printRequest.getId());
        return GSON.toJson(response);
    }
```
**Swagger specification:**
```
"/printdocument": {
      "post": {
        "tags": [
          "print-request-controller"
        ],
        "summary": "Returns a Print Request ID",
        "description": "This method allows other platforms to print a document using ProxyPrint",
        "operationId": "printDocumentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
```


####  Apply POST to delete resources

    */printshops/{id}/pricetable/deletepaper*
    */printshops/{id}/pricetable/deletering*
    */printshops/{id}/pricetable/deletecover*

**Swagger specification:**
```
    "/printshops/{id}/pricetable/deletecover": {
      "post": {
        "tags": [
          "price-table-controller"
        ],
        "summary": "Returns success/insuccess",
        "description": "Delete an existent Cover Item to a price table of a certain print shop.",
        "operationId": "deleteCoverItemUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "cti",
            "description": "cti",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CoverTableItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
```


#### POST with Principal */consumer/budget*

```
    "/consumer/budget": {
      "post": {
        "tags": [
          "print-request-controller"
        ],
        "summary": "Returns a set of budgets",
        "description": "This method calculates budgets for a given and already specified print request. The budgets are calculated for specific printshops also passed along as parameters.",
        "operationId": "calcBudgetForPrintRequestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "principal",
            "description": "principal",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Principal"
            }
          },
          {
            "name": "requestJSON",
            "in": "formData",
            "description": "requestJSON",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
```

# empty selected column by handling Sql SELECT
SELECT  FROM MEDIA_FILE_KEYWORDS 

