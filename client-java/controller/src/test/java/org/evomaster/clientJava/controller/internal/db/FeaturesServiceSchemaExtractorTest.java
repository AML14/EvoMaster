package org.evomaster.clientJava.controller.internal.db;

import org.evomaster.clientJava.controller.db.DatabaseTestTemplate;
import org.evomaster.clientJava.controller.db.SqlScriptRunner;
import org.evomaster.clientJava.controllerApi.dto.database.schema.DatabaseType;
import org.evomaster.clientJava.controllerApi.dto.database.schema.DbSchemaDto;
import org.junit.jupiter.api.Test;

import static org.evomaster.clientJava.controller.internal.db.TableDtoUtils.containsTable;
import static org.evomaster.clientJava.controller.internal.db.TableDtoUtils.getTable;
import static org.junit.jupiter.api.Assertions.*;

public class FeaturesServiceSchemaExtractorTest extends DatabaseTestTemplate {


    @Test
    public void testCreateAndExtractSchema() throws Exception {

        String command = "create sequence hibernate_sequence " +
                "start with 1 " +
                "increment by 1; " +

                "create table constraint_excludes ( " +
                "   id                    bigint not null, " +
                "   for_product_id        bigint, " +
                "   excluded_feature_name varchar(255), " +
                "   source_feature_name   varchar(255), " +
                "   primary key (id) " +
                ");" +

                "create table constraint_requires (" +
                "   id                    bigint not null," +
                "   for_product_id        bigint, " +
                "   required_feature_name varchar(255)," +
                "   source_feature_name   varchar(255)," +
                "   primary key (id) " +
                "); " +

                "create table feature( " +
                "   id bigint generated by default " +
                "   as identity, " +
                "   description varchar (255), " +
                "   name varchar(255) not null, " +
                "   product_id bigint, " +
                "   primary key(id) " +
                ");" +

                "create table product ( " +
                "   id bigint generated by default " +
                "   as identity, " +
                "   name varchar (255) not null, " +
                "   primary key(id) " +
                "); " +

                "create table product_configuration( " +
                "   id bigint generated by default " +
                "   as identity, " +
                "   name varchar (255) not null, " +
                "   valid boolean, " +
                "   product_id bigint, " +
                "   primary key (id) " +
                "); " +

                "create table product_configuration_actived_features ( " +
                "   in_configurations_id bigint not null, " +
                "   actived_features_id bigint not null, " +
                "   primary key(in_configurations_id, actived_features_id) " +
                "); " +

                "alter table constraint_excludes " +
                "   add constraint FK_blafpc49ar2njme3soh8lyirpforeign foreign key(for_product_id) references product; " +

                "alter table constraint_requires " +
                "   add constraint FK_77bc87w5luaf5ulfs18ctw2df foreign key(for_product_id) references product; " +

                "alter table feature " +
                "   add constraint FK810l56o2f4ev18qmd4434tqnw foreign key(product_id) references product; " +

                "alter table product_configuration " +
                "   add constraint FKhjiv1whgr5b8vhm2tkc2jed95 foreign key(product_id) references product; " +

                "alter table product_configuration_actived_features " +
                "   add constraint FKh6xt6rco9nhy67ykkp2en7miw foreign key(actived_features_id) references feature; " +

                "alter table product_configuration_actived_features " +
                "   add constraint FKtdpo2lujpc2j7guhlatsucp75 foreign key(in_configurations_id) references product_configuration; ";

        SqlScriptRunner.execCommand(getConnection(), command);

        DbSchemaDto schema = SchemaExtractor.extract(getConnection());
        assertNotNull(schema);

        assertAll(() -> assertEquals("public", schema.name.toLowerCase()),
                () -> assertEquals(DatabaseType.H2, schema.databaseType),
                () -> assertEquals(6, schema.tables.size()),
                () -> assertTrue(containsTable(schema.tables, "CONSTRAINT_EXCLUDES")),
                () -> assertTrue(containsTable(schema.tables, "CONSTRAINT_REQUIRES")),
                () -> assertTrue(containsTable(schema.tables, "FEATURE")),
                () -> assertTrue(containsTable(schema.tables, "PRODUCT")),
                () -> assertTrue(containsTable(schema.tables, "PRODUCT_CONFIGURATION")),
                () -> assertTrue(containsTable(schema.tables, "PRODUCT_CONFIGURATION_ACTIVED_FEATURES"))
        );


        assertEquals(4, getTable(schema.tables, "CONSTRAINT_EXCLUDES").columns.size());
        assertEquals(4, getTable(schema.tables, "CONSTRAINT_REQUIRES").columns.size());
        assertEquals(4, getTable(schema.tables, "FEATURE").columns.size());
        assertEquals(2, getTable(schema.tables, "PRODUCT").columns.size());
        assertEquals(4, getTable(schema.tables, "PRODUCT_CONFIGURATION").columns.size());
        assertEquals(2, getTable(schema.tables, "PRODUCT_CONFIGURATION_ACTIVED_FEATURES").columns.size());

    }


}