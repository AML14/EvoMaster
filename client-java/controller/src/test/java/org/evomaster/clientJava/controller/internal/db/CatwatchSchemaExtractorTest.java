package org.evomaster.clientJava.controller.internal.db;

import org.evomaster.clientJava.controller.db.DatabaseTestTemplate;
import org.evomaster.clientJava.controller.db.SqlScriptRunner;
import org.evomaster.clientJava.controllerApi.dto.database.schema.DatabaseType;
import org.evomaster.clientJava.controllerApi.dto.database.schema.DbSchemaDto;
import org.junit.jupiter.api.Test;

import static org.evomaster.clientJava.controller.internal.db.TableDtoUtils.containsTable;
import static org.evomaster.clientJava.controller.internal.db.TableDtoUtils.getTable;
import static org.junit.jupiter.api.Assertions.*;

public class CatwatchSchemaExtractorTest extends DatabaseTestTemplate {


    @Test
    public void testCreateAndExtractSchema() throws Exception {

        String command = "create table contributor (id bigint not null, organization_id bigint not null, snapshot_date timestamp not null, name varchar(255), organization_name varchar(255), organizational_commits_count integer, organizational_projects_count integer, personal_commits_count integer, personal_projects_count integer, url varchar(255), primary key (id, organization_id, snapshot_date)); "
                + "create table language_list (project_id integer not null, language varchar(255)); "
                + "create table maintainers (project_id integer not null, maintainer varchar(255)); "
                + "create table project (id integer generated by default as identity, commits_count integer, contributors_count integer, description varchar(255), external_contributors_count integer, forks_count integer, git_hub_project_id bigint, image varchar(255), last_pushed varchar(255), name varchar(255), organization_name varchar(255), primary_language varchar(255), score integer, snapshot_date timestamp, stars_count integer, title varchar(255), url varchar(255), primary key (id)); "
                + "create table statistics (id bigint not null, snapshot_date timestamp not null, all_contributors_count integer, all_forks_count integer, all_size_count integer, all_stars_count integer, external_contributors_count integer, members_count integer, organization_name varchar(255), private_project_count integer, program_languages_count integer, public_project_count integer, tags_count integer, teams_count integer, primary key (id, snapshot_date)); "
                + "alter table language_list add constraint FKsdfob66aw6c1lh66uybu5eess foreign key (project_id) references project; "
                + "alter table maintainers add constraint FK81pbx1rwr4s75tx5lri98t3ee foreign key (project_id) references project;";

        SqlScriptRunner.execCommand(getConnection(), command);

        DbSchemaDto schema = SchemaExtractor.extract(getConnection());
        assertNotNull(schema);

        assertAll(() -> assertEquals("public", schema.name.toLowerCase()),
                () -> assertEquals(DatabaseType.H2, schema.databaseType),
                () -> assertEquals(5, schema.tables.size()),
                () -> assertTrue(containsTable(schema.tables, "CONTRIBUTOR")),
                () -> assertTrue(containsTable(schema.tables, "LANGUAGE_LIST")),
                () -> assertTrue(containsTable(schema.tables, "MAINTAINERS")),
                () -> assertTrue(containsTable(schema.tables, "PROJECT")),
                () -> assertTrue(containsTable(schema.tables, "STATISTICS"))
        );

        assertEquals(10, getTable(schema.tables, "CONTRIBUTOR").columns.size());
        assertEquals(2, getTable(schema.tables, "LANGUAGE_LIST").columns.size());
        assertEquals(2, getTable(schema.tables, "MAINTAINERS").columns.size());
        assertEquals(17, getTable(schema.tables, "PROJECT").columns.size());
        assertEquals(14, getTable(schema.tables, "STATISTICS").columns.size());

    }


}